// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  hashedPassword  String?

  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  profile         Profile?

  accounts        Account[]
}

model Profile {
  id            String    @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  userId        String @unique
  user          User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  favoriteIds   String[]  
  listings      Listing[]
  reservations  Reservation[]

}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Listing {
  id                 String  @id @default(cuid())
  profileId             String
  profile               Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  title              String
  description        String
  imageUrl           String
  category           String
  roomCounter        Int
  bathRoomCount      Int
  guestCounter       Int
  locationValue      String
  price              Int

  reservations       Reservation[]

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}

model Reservation {
  id                 String  @id @default(cuid())
  profileId             String
  profile               Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)

  listingId          String
  listing            Listing    @relation(fields: [listingId], references: [id], onDelete: Cascade)

  startDate          DateTime
  endDate            DateTime

  totalPrice         Int

  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
}